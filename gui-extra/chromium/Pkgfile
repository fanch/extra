# Depends on: xorg-libxcomposite lld python-sphinx minizip opus gnome-keyring mesa gn json-glib ninja gtk3 nss libpng alsa-lib xdg-utils xorg-libxscrnsaver libexif libgcrypt dbus flac snappy speech-dispatcher pciutils pulseaudio libsecret libvpx desktop-file-utils libevent re2 kerberos libwebp cups hicolor-icon-theme mesa usbutils yasm ffmpeg icu libjpeg-turbo libpng libxml2 node perl-file-basedir python2 git ttf-liberation gconf freetype harfbuzz ca-certificates upower


description="Open source version of Google Chrome web browser."
url="http://chromium.org/"
packager="tnut <tnut@nutyx.org>"
contributors="Pierre B., Greg, Remy"
run=(ca-certificates upower)

name=chromium
version=70.0.3538.77
_launcher_ver=6
release=1
source=(https://commondatastorage.googleapis.com/chromium-browser-official/$name-$version.tar.xz
        https://github.com/foutrelis/chromium-launcher/archive/v$_launcher_ver.tar.gz
        include-stdint.h-in-pdfium_mem_buffer_file_write.h.patch
        chromium-widevine-r2.patch
        chromium-system-icu.patch
        chromium-skia-harmony.patch
        chromium-harfbuzz-r0.patch)

# Possible replacements are listed in build/linux/unbundle/replace_gn_files.py
# Keys are the names in the above script; values are the dependencies in Arch
declare -gA _system_libs=(
  [ffmpeg]=ffmpeg
  [flac]=flac
  [fontconfig]=fontconfig
  [freetype]=freetype2
  [harfbuzz-ng]=harfbuzz
  [icu]=icu
  [libdrm]=
  [libjpeg]=libjpeg
  #[libpng]=libpng            # https://crbug.com/752403#c10
  #[libvpx]=libvpx            # needs unreleased libvpx
  [libwebp]=libwebp
  [libxml]=libxml2
  [libxslt]=libxslt
  [opus]=opus
  [re2]=re2
  [snappy]=snappy
  [yasm]=
  [zlib]=minizip
)
_unwanted_bundled_libs=(
  ${!_system_libs[@]}
  ${_system_libs[libjpeg]+libjpeg_turbo}
)
depends+=(${_system_libs[@]})

# Google API keys (see https://www.chromium.org/developers/how-tos/api-keys)
# Note: These are for Arch Linux use ONLY. For your own distribution, please
# get your own set of keys.
_google_api_key=AIzaSyDwr302FpOSkGRpLlUpPThNTDPbXcIn_FM
_google_default_client_id=413772536636.apps.googleusercontent.com
_google_default_client_secret=0ZChLK6AxeA3Isu96MkwqDR4

prepare() {
  cd $SRC/$name-$version

  # Allow building against system libraries in official builds
  sed -i 's/OFFICIAL_BUILD/GOOGLE_CHROME_BUILD/' \
    tools/generate_shim_headers/generate_shim_headers.py

  # https://crbug.com/893950
  sed -i -e 's/\<xmlMalloc\>/malloc/' -e 's/\<xmlFree\>/free/' \
    third_party/blink/renderer/core/xml/*.cc \
    third_party/blink/renderer/core/xml/parser/xml_document_parser.cc \
    third_party/libxml/chromium/libxml_utils.cc

  # https://crbug.com/879900
  patch -Np1 -i $SRC/include-stdint.h-in-pdfium_mem_buffer_file_write.h.patch

  # https://crbug.com/skia/6663#c10
  patch -Np4 -i $SRC/chromium-skia-harmony.patch

  # Fixes from Gentoo
  patch -Np1 -i $SRC/chromium-harfbuzz-r0.patch
  patch -Np1 -i $SRC/chromium-widevine-r2.patch

  # https://bugs.gentoo.org/661880#c21
  patch -Np1 -i $SRC/chromium-system-icu.patch

  # Force script incompatible with Python 3 to use /usr/bin/python2
  sed -i '1s|python$|&2|' third_party/dom_distiller_js/protoc_plugins/*.py

  mkdir -p third_party/node/linux/node-linux-x64/bin
  ln -s /usr/bin/node third_party/node/linux/node-linux-x64/bin/

  # Remove bundled libraries for which we will use the system copies; this
  # *should* do what the remove_bundled_libraries.py script does, with the
  # added benefit of not having to list all the remaining libraries
  local _lib
  for _lib in ${_unwanted_bundled_libs[@]}; do
    find "third_party/$_lib" -type f \
      \! -path "third_party/$_lib/chromium/*" \
      \! -path "third_party/$_lib/google/*" \
      \! -path 'third_party/yasm/run_yasm.py' \
      \! -regex '.*\.\(gn\|gni\|isolate\)' \
      -delete
  done

  python2 build/linux/unbundle/replace_gn_files.py \
    --system-libraries "${!_system_libs[@]}"
}

build() {
  make -C chromium-launcher-$_launcher_ver

  cd $SRC/$name-$version

  if check_buildoption ccache y; then
    # Avoid falling back to preprocessor mode when sources contain time macros
    export CCACHE_SLOPPINESS=time_macros
  fi

  export CC=clang
  export CXX=clang++
  export AR=ar
  export NM=nm

  local _flags=(
    'custom_toolchain="//build/toolchain/linux/unbundle:default"'
    'host_toolchain="//build/toolchain/linux/unbundle:default"'
    'clang_use_chrome_plugins=true'
    'is_official_build=true' # implies is_cfi=true on x86_64
    'treat_warnings_as_errors=false'
    'fieldtrial_testing_like_official_build=true'
    'ffmpeg_branding="Chrome"'
    'proprietary_codecs=true'
    'link_pulseaudio=true'
    'use_gnome_keyring=true'
    'use_sysroot=false'
    'linux_use_bundled_binutils=false'
    'use_custom_libcxx=false'
    'enable_hangout_services_extension=true'
    'enable_widevine=true'
    'enable_nacl=false'
    'enable_swiftshader=false'
    "google_api_key=\"${_google_api_key}\""
    "google_default_client_id=\"${_google_default_client_id}\""
    "google_default_client_secret=\"${_google_default_client_secret}\""
  )

	# Facilitate deterministic builds (taken from build/config/compiler/BUILD.gn)
	CFLAGS+='   -Wno-builtin-macro-redefined'
	CXXFLAGS+=' -Wno-builtin-macro-redefined'
	CPPFLAGS+=' -D__DATE__=  -D__TIME__=  -D__TIMESTAMP__='

	if check_option strip y; then
    _flags+=('symbol_level=0')

    # Mimic exclude_unwind_tables=true
    CFLAGS+='   -fno-unwind-tables -fno-asynchronous-unwind-tables'
    CXXFLAGS+=' -fno-unwind-tables -fno-asynchronous-unwind-tables'
    CPPFLAGS+=' -DNO_UNWIND_TABLES'
	fi
  
	gn gen out/Release --args="${_flags[*]}" --script-executable=/usr/bin/python2
	ninja -C out/Release chrome chrome_sandbox chromedriver
}

package() {
  cd chromium-launcher-$_launcher_ver
  make PREFIX=/usr DESTDIR=$PKG install
  install -Dm644 LICENSE \
    $PKG/usr/share/licenses/chromium/LICENSE.launcher

  cd $SRC/$name-$version

  install -D out/Release/chrome $PKG/usr/lib/chromium/chromium
  install -Dm4755 out/Release/chrome_sandbox $PKG/usr/lib/chromium/chrome-sandbox
  ln -s /usr/lib/chromium/chromedriver $PKG/usr/bin/chromedriver

  install -Dm644 chrome/installer/linux/common/desktop.template \
    $PKG/usr/share/applications/chromium.desktop
  install -Dm644 chrome/app/resources/manpage.1.in \
    $PKG/usr/share/man/man1/chromium.1
  sed -i \
    -e "s/@@MENUNAME@@/Chromium/g" \
    -e "s/@@PACKAGE@@/chromium/g" \
    -e "s/@@USR_BIN_SYMLINK_NAME@@/chromium/g" \
    $PKG/usr/share/applications/chromium.desktop \
    $PKG/usr/share/man/man1/chromium.1

  cp \
    out/Release/{chrome_{100,200}_percent,resources}.pak \
    out/Release/{*.bin,chromedriver} \
    $PKG/usr/lib/chromium/
  install -Dm644 -t $PKG/usr/lib/chromium/locales out/Release/locales/*.pak

  if [[ -z ${_system_libs[icu]+set} ]]; then
    cp out/Release/icudtl.dat $PKG/usr/lib/chromium/
  fi

  for size in 22 24 48 64 128 256; do
    install -Dm644 chrome/app/theme/chromium/product_logo_$size.png \
      $PKG/usr/share/icons/hicolor/${size}x${size}/apps/chromium.png
  done

  for size in 16 32; do
    install -Dm644 chrome/app/theme/default_100_percent/chromium/product_logo_$size.png \
      $PKG/usr/share/icons/hicolor/${size}x${size}/apps/chromium.png
  done

  install -Dm644 LICENSE $PKG/usr/share/licenses/chromium/LICENSE
}
